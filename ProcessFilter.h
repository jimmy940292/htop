/* Do not edit this file. It was automatically genarated. */

#ifndef HEADER_ProcessFilter
#define HEADER_ProcessFilter
/*
htop
(C) 2004 Hisham H. Muhammad
Released under the GNU GPL, see the COPYING file
in the source distribution for its full text.
*/

#include "Object.h"
#include <stdlib.h>
#include <string.h>

#include "debug.h"

typedef enum ProcessField_ {
   PID, COMM, STATE, PPID, PGRP, SESSION, TTY_NR, TPGID, FLAGS, MINFLT, CMINFLT, MAJFLT, CMAJFLT, UTIME,
   STIME, CUTIME, CSTIME, PRIORITY, NICE, ITREALVALUE, STARTTIME, VSIZE, RSS, RLIM, STARTCODE, ENDCODE,
   STARTSTACK, KSTKESP, KSTKEIP, SIGNAL, BLOCKED, SIGIGNORE, SIGCATCH, WCHAN, NSWAP, CNSWAP, EXIT_SIGNAL,
   PROCESSOR, M_SIZE, M_RESIDENT, M_SHARE, M_TRS, M_DRS, M_LRS, M_DT, ST_UID, PERCENT_CPU, PERCENT_MEM, USER, LAST
} ProcessField;

typedef struct ProcessFilter_ {
   Object super;

   ProcessField* fields;
   int width;
   ProcessField sortKey;
   int direction;
} ProcessFilter;

extern char* processFieldNames[];





ProcessFilter* ProcessFilter_new();

void ProcessFilter_delete(ProcessFilter* this);

void ProcessFilter_invertSortOrder(ProcessFilter* this);

void ProcessFilter_sortKey(ProcessFilter* this, int delta);

void ProcessFilter_display(Object* cast, RichString* out);

char* ProcessFilter_printHeader(ProcessFilter* this, ProcessField field);

#endif
